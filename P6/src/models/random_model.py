from models.model import Model
from keras import Sequential, layers, models
from keras.layers import Rescaling
from keras.optimizers import RMSprop, Adam
import numpy as np

class RandomModel(Model):
    def _define_model(self, input_shape, categories_count): #Yazmyn Claimed Task
        # Your code goes here
        # you have to initialize self.model to a keras model
        # very similar to transfered_model.py, the only difference is that you should randomize the weights
        # load your basic model with keras's load_model function
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        # randomize the weights of the loaded model, possibly by using _randomize_layers
        # use this model by removing the last layer, adding dense layers and an output layer
    # Load the pre-trained basic model
        base_model = models.load_model('path_to_your_saved_basic_model.h5')
        
        # Freeze the layers of the base model to prevent them from being trained
        for layer in base_model.layers:
            layer.trainable = False
        
        # Randomize the weights of the loaded model
        self._randomize_layers(base_model)
        
        # Remove the last layer of the base model
        base_model = models.Model(inputs=base_model.input, outputs=base_model.layers[-2].output)
        
        # Add new dense layers and the output layer
        self.model = Sequential([
            base_model,
            layers.Dense(64, activation='relu'),
            layers.Dense(categories_count, activation='softmax')
        ])
    
    def _compile_model(self):
        self.model.compile(
            optimizer=RMSprop(learning_rate=0.001), #Learning/Update Mechanism
            loss='categorical_crossentropy',        #Error function used to drive each update
            metrics=['accuracy'],                   #The success metric to monitor during training and testing
        )

    @staticmethod
    def _randomize_layers(model):
        #Randomize the weights of each layer in the model
        for layer in model.layers:
            if hasattr(layer, 'kernel') and layer.kernel is not None:  # Check if the layer has weights (kernel)
                original_shape = layer.kernel.shape  # Get the shape of the weights
                random_weights = np.random.standard_normal(original_shape)  # Generate random weights
                layer.kernel.assign(random_weights)  # Assign the random weights to the layer
            if hasattr(layer, 'bias') and layer.bias is not None:  # Check if the layer has bias
                original_shape = layer.bias.shape  # Get the shape of the bias
                random_bias = np.random.standard_normal(original_shape)  # Generate random bias
                layer.bias.assign(random_bias)
        pass